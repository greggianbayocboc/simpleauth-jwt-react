



//production
dependencies {

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version:'1.4.0.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version:"${springBootVersion}"
   /* compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: '1.4.0.RELEASE'
    compile (group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version:"${springBootVersion}"){
        exclude group: 'org.springframework.boot', module: "spring-boot-starter-tomcat"
        exclude group: 'org.springframework.boot', module: "tomcat-websocket"

    }*/
}






/*
npm_run_dist {
    execOverrides {
        it.workingDir = file("${project.projectDir}/frontend/")
    }
}

*/




task cleanPublicFolder(type: Delete){
    description 'Clean files from public'
    delete "${project.projectDir}/src/main/resources/public/"
}


task copyDist(type: Copy){
   // dependsOn npm_run_dist
    description 'Copy Files from frontend to public'
    def publicDir = file("${project.projectDir}/src/main/resources/public/")
    publicDir.mkdirs()

    from  "${project.projectDir}/frontend/dist/"
    into  "${project.projectDir}/src/main/resources/public/"
}


task generateNewVersionFile{
    delete "${project.projectDir}/src/main/resources/VERSION"
    def outputDir = file("${project.projectDir}/src/main/resources/")
    new File(outputDir, "VERSION").write("$project.version")
}



task compileFrontEnd{
    dependsOn copyDist
}

generateNewVersionFile.dependsOn cleanPublicFolder
compileFrontEnd.dependsOn cleanPublicFolder

processResources{
    dependsOn compileFrontEnd
}

